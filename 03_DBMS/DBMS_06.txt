-- ✅ RAND()
-- 0 이상 1 미만의 랜덤 소수 반환
-- 예제:
SELECT RAND();                       -- 예: 0.83472...
SELECT RAND(10);                    -- seed 지정 → 항상 같은 값
SELECT FLOOR(RAND() * 100) + 1;     -- 1 ~ 100 사이의 정수 랜덤 생성

-- ✅ IF()
-- 조건식: IF(조건, 참일 때, 거짓일 때)
-- 예제:
SELECT name, salary,
       IF(salary >= 4000, '고연봉', '저연봉') AS 급여구분
FROM employee;

-- ✅ DATE / TIME / DATETIME
-- DATE: 날짜만 저장 (YYYY-MM-DD)
-- TIME: 시간만 저장 (HH:MM:SS)
-- DATETIME: 날짜 + 시간 저장 (YYYY-MM-DD HH:MM:SS)
-- 예제:
CREATE TABLE logs (
  id INT AUTO_INCREMENT PRIMARY KEY,
  log_date DATE,
  log_time TIME,
  log_created DATETIME
);

-- ✅ CURDATE()
-- 현재 날짜만 반환 (YYYY-MM-DD 형식)
-- CURRENT_DATE와 동일
-- NOW(): 현재 날짜 + 시간 반환

-- 예제:
SELECT CURDATE();        -- 오늘 날짜: 2025-07-14
SELECT CURRENT_DATE;     -- 동일한 결과
SELECT NOW();            -- 날짜 + 시간: 2025-07-14 12:34:56
SELECT DATE(NOW());      -- 날짜만 추출
SELECT TIME(NOW());      -- 시간만 추출

=========================================================

-- ✅ VIEW (뷰)

-- ✅ 개념 정리
-- 뷰(View)는 복잡한 SELECT 결과를 가상의 테이블처럼 저장해두는 객체
-- 실데이터를 저장하지 않으며, 뷰를 조회하면 내부 SELECT가 실행됨
-- 코드 재사용, 가독성 향상, 보안 제한 등에 사용됨

-- ✅ 기본 문법
CREATE VIEW 뷰이름 AS
SELECT문;

-- ✅ 예제 1: 평균 급여가 4000 이상인 직원만 포함하는 뷰
CREATE VIEW high_salary_employees AS
SELECT name, salary, position
FROM employee
WHERE salary >= 4000;

-- ✅ 예제 2: 포지션별 평균 급여를 보여주는 뷰
CREATE VIEW position_avg_salary AS
SELECT position, AVG(salary) AS avg_salary
FROM employee
GROUP BY position;

-- ✅ 뷰 조회하기
SELECT * FROM high_salary_employees;

-- ✅ 뷰 수정하기
-- MySQL에서는 CREATE OR REPLACE VIEW로 수정
CREATE OR REPLACE VIEW high_salary_employees AS
SELECT name, salary, position, age
FROM employee
WHERE salary >= 4000;

-- ✅ 뷰 삭제
DROP VIEW 뷰이름;

-- 예제:
DROP VIEW high_salary_employees;

-- ✅ 뷰의 특징
-- 1) 데이터를 저장하지 않음 (실시간으로 테이블 조회)
-- 2) 기본적으로 SELECT만 가능 (업데이트/삭제는 제약 있음)
-- 3) 복잡한 SQL을 단순하게 만들 수 있음
-- 4) 보안상 필요한 컬럼만 노출하는 데 사용 가능

-- ✅ 주의: 뷰를 통해 데이터 변경이 가능한 경우
-- → 단일 테이블 기반, GROUP BY나 집계 함수 없이, 기본키 포함된 뷰 등 조건 만족 시만 가능

==========================================================

-- ✅ UNION / UNION ALL

-- ✅ 개념 정리

-- UNION:
-- 두 SELECT 결과를 합치되, 중복은 제거함 (DISTINCT 처리 포함)

-- UNION ALL:
-- 두 SELECT 결과를 합치되, 중복도 포함하여 모두 보여줌

-- ✅ 조건:
-- 1) SELECT되는 컬럼 수와 순서가 같아야 함
-- 2) 각 컬럼의 데이터 타입이 유사해야 함

-- ✅ 기본 문법
SELECT 열1, 열2 FROM 테이블1
UNION        -- 또는 UNION ALL
SELECT 열1, 열2 FROM 테이블2;

-- ✅ 예제 데이터 가정:
-- 테이블 A (developers): 개발자 이름 목록
-- 테이블 B (designers): 디자이너 이름 목록

-- 예제 1: 중복 제거하고 전체 직원 이름 출력
SELECT name FROM developers
UNION
SELECT name FROM designers;

-- 예제 2: 중복 포함하여 전체 직원 이름 출력
SELECT name FROM developers
UNION ALL
SELECT name FROM designers;

-- ✅ 응용: 직위별로 급여 5000 이상 받는 직원과 3000 이하 받는 직원의 이름 모아서 출력
SELECT name, salary FROM employee WHERE salary >= 5000
UNION
SELECT name, salary FROM employee WHERE salary <= 3000;

-- ✅ 정렬 추가:
-- 전체 결과를 하나로 합친 뒤 정렬하려면 마지막 SELECT 끝에 ORDER BY
SELECT name FROM developers
UNION
SELECT name FROM designers
ORDER BY name ASC;

-- ✅ UNION ALL vs UNION 성능 차이
-- UNION ALL이 더 빠름 (중복 제거를 하지 않기 때문)
-- 중복 제거가 필요 없다면 UNION ALL을 사용하는 것이 효율적임

==========================================================

1. RAND()
1부터 100 사이의 랜덤 정수를 생성하여 5개 행을 출력하는 쿼리를 작성하시오.
SELECT RAND() FROM employee LIMIT 5;

2. IF() + 조건 분기
직원들의 급여가 4000 이상이면 '고연봉', 아니면 '저연봉'으로 구분하여 이름, 급여, 구분을 출력하시오.
SELECT name, salary, IF(salary >= 4000, '고연봉', '저연봉') FROM employee;

3. CURDATE()
오늘 날짜를 기준으로 입사일(hire_date)이 365일 이상 된 직원의 이름과 입사일을 출력하시오.
SELECT name, hire_date FROM employee WHERE DATEDIFF(CURDATE(), hire_date) >= 365;

4. DATETIME 형식 이해
현재 날짜와 시간을 DATETIME 형식으로 반환하고, 날짜만과 시간만 따로 나눠서 출력하시오.
SELECT NOW() AS datetime, DATE(NOW()) AS 날짜, TIME(NOW()) AS 시간 FROM employee LIMIT 1;

5. VIEW 생성
마케터(position = '마케터') 중 급여가 3500 이상인 사람들만을 포함한 뷰를 생성하시오. 뷰 이름은 marketer_high로 한다.
CREATE VIEW marketer_high AS SELECT p.position_name, e.name, e.salary FROM employee e JOIN position p ON p.position_id = e.position_id WHERE (p.position_id, e.salary) IN (SELECT position_id, salary FROM employee WHERE salary >= 3500) AND p.position_name = '마케터';

6. VIEW 활용
위에서 만든 뷰 marketer_high를 이용하여 모든 데이터를 조회하시오.
SELECT * FROM marketer_high;

7. UNION
developers 테이블과 designers 테이블에서 이름이 겹치지 않도록 중복 없이 전체 이름을 출력하시오.
SELECT name FROM developers UNION SELECT name FROM designers;

8. UNION ALL
급여가 5000 이상인 직원과 3000 이하인 직원들의 이름과 급여를 중복 포함해서 출력하시오.
SELECT name, salary FROM employee WHERE salary >= 5000 UNION ALL SELECT name, salary FROM employee WHERE salary <= 3000;

9. UNION + ORDER BY
employee 테이블에서 남자 직원 이름과 여자 직원 이름을 합쳐서, 이름 순으로 정렬하여 출력하시오. (중복 제거)
SELECT name FROM employee WHERE gender = 'M' UNITON SELECT name FROM employee WHERE gender = 'F' ORDER BY name;

10. VIEW 삭제
앞에서 생성한 marketer_high 뷰를 삭제하는 쿼리를 작성하시오.
DROP VIEW marketer_high;
