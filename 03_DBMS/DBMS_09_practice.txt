Sakila 실무형 SQL 프로젝트 활동지

# Sakila 비디오 대여점 데이터 분석 및 발전 방향
# 1. 국가별 / 장르별 대여량 분석 : 국가별 / 장르별 매출 데이터를 요약해서 매출 흐름 파악
	-- 1-1. !!국가별 대여량 분석!!
		-- 1-1-1. 손님 별 거주 도시 확인 / 생성된 VIEW 확인
		CREATE VIEW cust_couns AS SELECT c.customer_id, CONCAT(c.first_name, ' ', c.last_name) AS full_name, ct.city FROM address a JOIN customer c ON a.address_id = c.address_id JOIN city ct ON ct.city_id = a.city_id;
		SELECT * FROM cust_couns;
		
		-- 1-1-2. cust_coun VIEW와 country를 연동해 cust_country VIEW 생성 / 확인
		CREATE VIEW cust_countries AS SELECT cc.customer_id, cc.full_name, c.country FROM city ci JOIN cust_couns cc ON cc.city = ci.city JOIN country c ON ci.country_id = c.country_id;
		SELECT * FROM cust_countries ORDER BY customer_id;
		
		-- 1-1-3. cust_country VIEW를 사용해 각 국가별 대여량 확인하기
		SELECT cc.country AS `국가`, COUNT(r.rental_id) AS `대여량` FROM customer c JOIN cust_countries cc ON cc.customer_id = c.customer_id JOIN rental r ON r.customer_id = c.customer_id GROUP BY `국가` ORDER BY `대여량` DESC;

		
	-- 1-2. !!대여량 TOP 5의 국가 인원 추리기 (국가명/ID) (India/44, China/23 , United States/103 , Japan/50 , Mexico/60)!!
		-- 1-2-1. 대여량 TOP 5 국가에 사는 고객 선별 (인도) 
		CREATE VIEW india_customer AS SELECT customer_id FROM cust_countries WHERE country = 'India';
		SELECT * FROM india_customer ORDER BY customer_id;
		
		-- 1-2-2. 대여량 TOP 5 국가에 사는 고객 선별 (중국) 
		CREATE VIEW china_customer AS SELECT customer_id FROM cust_countries WHERE country = 'China';
		SELECT * FROM china_customer ORDER BY customer_id;
		
		-- 1-2-3. 대여량 TOP 5 국가에 사는 고객 선별 (미국) 
		CREATE VIEW us_customer AS SELECT customer_id FROM cust_countries WHERE country = 'United States';
		SELECT * FROM us_customer ORDER BY customer_id;
		
		-- 1-2-4. 대여량 TOP 5 국가에 사는 고객 선별 (일본) 
		CREATE VIEW japan_customer AS SELECT customer_id FROM cust_countries WHERE country = 'Japan';
		SELECT * FROM japan_customer ORDER BY customer_id;
		
		-- 1-2-5. 대여량 TOP 5 국가에 사는 고객 선별 (멕시코) 
		CREATE VIEW mexico_customer AS SELECT customer_id FROM cust_countries WHERE country = 'Mexico';
		SELECT * FROM mexico_customer ORDER BY customer_id;
		

	-- 1-3. !!대여량 TOP 5의 국가에서 가장 인기 있는 장르 TOP5!!
		-- 1-3-*. 국가별 빌린 영화 (중복 포함)
		CREATE VIEW i_film_id AS SELECT i.film_id FROM rental r JOIN india_customer ic ON ic.customer_id = r.customer_id JOIN inventory i ON r.inventory_id = i.inventory_id;
		CREATE VIEW c_film_id AS SELECT i.film_id FROM rental r JOIN china_customer ic ON ic.customer_id = r.customer_id JOIN inventory i ON r.inventory_id = i.inventory_id;
		CREATE VIEW us_film_id AS SELECT i.film_id FROM rental r JOIN us_customer ic ON ic.customer_id = r.customer_id JOIN inventory i ON r.inventory_id = i.inventory_id;
		CREATE VIEW j_film_id AS SELECT i.film_id FROM rental r JOIN japan_customer ic ON ic.customer_id = r.customer_id JOIN inventory i ON r.inventory_id = i.inventory_id;
		CREATE VIEW m_film_id AS SELECT i.film_id FROM rental r JOIN mexico_customer ic ON ic.customer_id = r.customer_id JOIN inventory i ON r.inventory_id = i.inventory_id;
		
		SELECT * FROM i_film_id;
		SELECT * FROM c_film_id;
		SELECT * FROM us_film_id;
		SELECT * FROM j_film_id;
		SELECT * FROM m_film_id;
		
		-- 1-3-1. TOP 5 인기 장르 (인도) 
		SELECT c.name, COUNT(ifi.film_id) AS `genre_count` FROM film_category fc JOIN category c ON fc.category_id = c.category_id JOIN i_film_id ifi ON ifi.film_id = fc.film_id GROUP BY c.name ORDER BY genre_count DESC LIMIT 5;
		
		-- 1-3-2. TOP 5 인기 장르 (중국) 
		SELECT c.name, COUNT(cfi.film_id) AS `genre_count` FROM film_category fc JOIN category c ON fc.category_id = c.category_id JOIN c_film_id cfi ON cfi.film_id = fc.film_id GROUP BY c.name ORDER BY genre_count DESC LIMIT 5;
		
		-- 1-3-3. TOP 5 인기 장르 (미국) 
		SELECT c.name, COUNT(usfi.film_id) AS `genre_count` FROM film_category fc JOIN category c ON fc.category_id = c.category_id JOIN us_film_id usfi ON usfi.film_id = fc.film_id GROUP BY c.name ORDER BY genre_count DESC LIMIT 5;
		
		-- 1-3-4. TOP 5 인기 장르 (일본) 
		SELECT c.name, COUNT(jfi.film_id) AS `genre_count` FROM film_category fc JOIN category c ON fc.category_id = c.category_id JOIN j_film_id jfi ON jfi.film_id = fc.film_id GROUP BY c.name ORDER BY genre_count DESC LIMIT 5;
		
		-- 1-3-5. TOP 5 인기 장르 (멕시코) 
		SELECT c.name, COUNT(mfi.film_id) AS `genre_count` FROM film_category fc JOIN category c ON fc.category_id = c.category_id JOIN m_film_id mfi ON mfi.film_id = fc.film_id GROUP BY c.name ORDER BY genre_count DESC LIMIT 5;


-- 1번 결론 : 5개의 국가 정리, 가장 많은 매출을 올린 월 분석
-- 가장 대여량이 많은 TOP 5개의 국가는 순서대로 "인도 > 중국 > 미국 > 일본 > 멕시코" 이다. 
-- 인도 TOP 5 장르 = 액션 > 스포츠 > 다큐멘터리 > 애니메이션 > 외국
-- 중국 TOP 5 장르 = 애니매이션 > 가족 > 드라마 > 스포츠 > 게임
-- 미국 TOP 5 장르 = 다큐멘터리 > 스포츠> 드라마 > 애니메이션 > 가족
-- 일본 TOP 5 장르 = 애니매이션 > 공상과학 > 드라마 > 다큐멘터리 > NEW
-- 멕시코 TOP 5 장르 = 스포츠 > 드라마 > 공상과학 > 다큐멘터리 > 외국

-- TOP 5 국가의 인기 장르를 바탕으로 대중적인 장르 (1등. 5점 // 2등. 4점 // 3등. 3점 // 4등. 2점 // 5등. 1점)
-- 1등. 스포츠 영화 // 2등. 애니매이션 영화 // 3등. 드라마 영화 // 4등. 다큐멘터리 영화 // 5등. 공상과학 영화
-- 스포츠/애니메이션/드라마/다큐멘터리/공상과학 영화 위주로 배치하면 매출에 긍정적인 영향이 있을 수 있음.


# 2. 고객 등급 분류 : 대여 횟수 또는 결제 금액 기준으로 고객을 등급화 / 단골 고객이 많은지 한번 온 고객이 많은지 파악
	-- 2-1. 고객 별 대여 횟수
	SELECT c.customer_id AS `고객 아이디`, COUNT(r.rental_id) AS `대여 합산` FROM customer c JOIN rental r ON c.customer_id = r.customer_id GROUP BY `고객 아이디` ORDER BY COUNT(r.rental_id) DESC;
		
	-- 2-2. 대여 횟수 별로 골드 // 실버 // 브론즈 등급 나누기 (대여 합산 최대치가 46이기 때문에 40 ~  = 플레티넘 // 30 ~ 39 = 골드 // 20 ~ 29 = 실버 // 그 외는 브론즈) / VIEW 생성
	CREATE VIEW cus_grade AS SELECT c.customer_id AS `고객 아이디`, COUNT(r.rental_id) AS `대여 합산`, CASE WHEN COUNT(r.rental_id) >= 40 THEN '플레티넘' WHEN COUNT(r.rental_id) >= 30 THEN '골드' WHEN COUNT(r.rental_id) >= 20 THEN '실버' ELSE '브론즈' END AS '등급'  FROM customer c JOIN rental r ON c.customer_id = r.customer_id GROUP BY `고객 아이디` ORDER BY `대여 합산` DESC;
	SELECT * FROM cus_grade;
		
	-- 2-3. VIEW를 기준으로 각 등급별 고객 수 확인
	SELECT `등급`, COUNT(`등급`) AS `등급별 고객 수` FROM cus_grade GROUP BY `등급` ORDER BY COUNT(`등급`) DESC;
    
    
    -- 2번 결론 : 등급별 인원 수 파악 및 단골 / 새로운 손님 인원 수 파악.
    -- 매장에서 30회 이상 비디오를 빌려가신 골드, 플레티넘 회원은 총 178명 / 20 ~ 29회 빌려가신 실버 회원은 총 380명 / 20회 미만 빌려가신 브론즈 회원은 총 41명
    -- 따라서 Sakila 매장은 단골이 많은 비디오 가게라고 확신 할 수 있음.
    -- 신규 회원이 많이 부족하므로, 신규 회원들을 위한 이벤트 개최를 추천함.